Index: plot_kate.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># В данном файле хранится сюжет и его обработка\r\nimport pymorphy2\r\nimport pygame\r\nimport numpy as np\r\nfrom random import randint\r\nfrom abc import abstractmethod\r\n\r\npygame.init()\r\npygame.font.init()\r\n\r\nWIDTH = 500\r\nHEIGHT = 700\r\nf1 = pygame.font.Font('excentra.ttf', 20)\r\n\r\nFPS = 20\r\n# Экран\r\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\r\n\r\n\r\nclass Persona:\r\n    def __init__(self):\r\n        self.ege_point = 0\r\n        self.name = 0\r\n        self.luck = 0\r\n        self.smart = 0\r\n        self.pop = 0\r\n\r\n\r\nmain_character = Persona()\r\n\r\n\r\ndef draw_persona(name):\r\n    face = pygame.image.load(name)\r\n    screen.blit(face, (270, 250))\r\n\r\n\r\ndef ege_points():\r\n    flag = True\r\n    while flag:\r\n        steps[3].run()\r\n        steps[4].run()\r\n        (x, y) = pygame.mouse.get_pos()\r\n        if steps[4].button1.pressed((x, y)):\r\n            flag = False\r\n\r\n\r\nclass Step:\r\n\r\n    @abstractmethod\r\n    def run(self):\r\n        pass\r\n\r\n    def blit_text(self, surface, text, pos, font, color=pygame.Color('black')):\r\n        words = [word.split(' ') for word in text.splitlines()]  # 2D array where each row is a list of words.\r\n        space = font.size(' ')[0]  # The width of a space.\r\n        max_width, max_height = surface.get_size()\r\n        x, y = pos\r\n        for line in words:\r\n            for word in line:\r\n                word_surface = font.render(word, 0, color)\r\n                word_width, word_height = word_surface.get_size()\r\n                if x + word_width >= max_width:\r\n                    x = pos[0]  # Reset the x.\r\n                    y += word_height  # Start on new row.\r\n                surface.blit(word_surface, (x, y))\r\n                x += word_width + space\r\n            x = pos[0]  # Reset the x.\r\n            y += word_height  # Start on new row.\r\n\r\n    def draw(self):\r\n        pass\r\n\r\n    def draw_choice(self, text1, text2, text3):\r\n        \"\"\"\r\n        Draws rectangles for choices\r\n        \"\"\"\r\n        self.button1 = Button()\r\n        self.button1.create_button(screen, 'pink', 100, 560, 300, 40, 10, text1, 'black')\r\n        self.button2 = Button()\r\n        self.button2.create_button(screen, 'pink', 100, 605, 300, 40, 10, text2, 'black')\r\n        self.button3 = Button()\r\n        self.button3.create_button(screen, 'pink', 100, 650, 300, 40, 10, text3, 'black')\r\n\r\n\r\nclass InsertField:\r\n    \"\"\"\r\n    class for inserting\r\n    \"\"\"\r\n\r\n    def __init__(self, value, x, y, width, height, screen):\r\n        \"\"\"\r\n        init function\r\n        :param value: value\r\n        :param x: x position on screen\r\n        :param y: y position on screen\r\n        :param width: width\r\n        :param height: height\r\n        :param screen: surface\r\n        \"\"\"\r\n        self.is_active = False\r\n        self.value = str(value)\r\n        self.x = x\r\n        self.y = y\r\n        self.width = width\r\n        self.height = height\r\n        self.screen = screen\r\n\r\n    def blit_text(self, surface, text, pos, font, color=pygame.Color('black')):\r\n        words = [word.split(' ') for word in text.splitlines()]  # 2D array where each row is a list of words.\r\n        space = font.size(' ')[0]  # The width of a space.\r\n        max_width, max_height = surface.get_size()\r\n        x, y = pos\r\n        for line in words:\r\n            for word in line:\r\n                word_surface = font.render(word, 0, color)\r\n                word_width, word_height = word_surface.get_size()\r\n                if x + word_width >= max_width:\r\n                    x = pos[0]  # Reset the x.\r\n                    y += word_height  # Start on new row.\r\n                surface.blit(word_surface, (x, y))\r\n                x += word_width + space\r\n            x = pos[0]  # Reset the x.\r\n            y += word_height  # Start on new row.\r\n\r\n    def draw(self):\r\n        \"\"\"\r\n        drawing text on screen\r\n        :return:\r\n        \"\"\"\r\n        pygame.draw.rect(self.screen, (255, 255, 255), (self.x, self.y, self.width, self.height))\r\n        self.blit_text(self.screen, str(self.value), (self.x + 3, self.y + 3), f1)\r\n\r\n    def insert(self, char):\r\n        \"\"\"\r\n        set text in field\r\n        :param char: symbol\r\n        :return:\r\n        \"\"\"\r\n        if self.is_active:\r\n            self.value = self.value[:-1]\r\n            self.value += str(char)\r\n            self.value += \"|\"\r\n\r\n    def activate(self):\r\n        \"\"\"\r\n        activate field\r\n        :return:\r\n        \"\"\"\r\n        if not self.is_active:\r\n            self.is_active = True\r\n            self.value += \"|\"\r\n\r\n    def deactivate(self):\r\n        \"\"\"\r\n        disactivate field\r\n        :return:\r\n        \"\"\"\r\n        if self.is_active:\r\n            self.value = self.value[:-1]\r\n            self.is_active = False\r\n\r\n    def check_mouse(self):\r\n        \"\"\"\r\n        check mouse position\r\n        :return:\r\n        \"\"\"\r\n        if self.x < pygame.mouse.get_pos()[0] < self.x + self.width and self.y < pygame.mouse.get_pos()[1] < self.y \\\r\n                + self.height:\r\n            return True\r\n        else:\r\n            return False\r\n\r\n\r\nclass Button:\r\n    def create_button(self, surface, color, x, y, length, height, width, text, text_color):\r\n        surface = self.draw_button(surface, color, length, height, x, y, width)\r\n        surface = self.write_text(surface, text, text_color, length, height, x, y)\r\n        self.rect = pygame.Rect(x, y, length, height)\r\n        return surface\r\n\r\n    def write_text(self, surface, text, text_color, length, height, x, y):\r\n        font_size = int(length // len(text))\r\n        myFont = pygame.font.SysFont(\"Calibri\", font_size)\r\n        myText = myFont.render(text, 1, text_color)\r\n        surface.blit(myText, ((x + length / 2) - myText.get_width() / 2, (y + height / 2) - myText.get_height() / 2))\r\n        return surface\r\n\r\n    def draw_button(self, surface, color, length, height, x, y, width):\r\n        for i in range(1, 10):\r\n            s = pygame.Surface((length + (i * 2), height + (i * 2)))\r\n            s.fill(color)\r\n            alpha = (255 / (i + 2))\r\n            if alpha <= 0:\r\n                alpha = 1\r\n            s.set_alpha(alpha)\r\n            pygame.draw.rect(s, color, (x - i, y - i, length + i, height + i), width)\r\n            surface.blit(s, (x - i, y - i))\r\n        pygame.draw.rect(surface, color, (x, y, length, height), 0)\r\n        pygame.draw.rect(surface, (190, 190, 190), (x, y, length, height), 1)\r\n        return surface\r\n\r\n    def pressed(self, mouse):\r\n        if mouse[0] > self.rect.topleft[0]:\r\n            if mouse[1] > self.rect.topleft[1]:\r\n                if mouse[0] < self.rect.bottomright[0]:\r\n                    if mouse[1] < self.rect.bottomright[1]:\r\n                        print\r\n                        \"Some button was pressed!\"\r\n                        return True\r\n                    else:\r\n                        return False\r\n                else:\r\n                    return False\r\n            else:\r\n                return False\r\n        else:\r\n            return False\r\n\r\n\r\nclass Step_0(Step):\r\n\r\n    def __init__(self, screen):\r\n        self.screen = screen\r\n\r\n    def run(self):\r\n        clock = pygame.time.Clock()\r\n        finished = False\r\n        while not finished:\r\n            clock.tick(FPS)\r\n            self.draw()\r\n            for event in pygame.event.get():\r\n                if event.type == pygame.QUIT:\r\n                    finished = True\r\n                if event.type == pygame.MOUSEBUTTONDOWN:\r\n                    (x, y) = pygame.mouse.get_pos()\r\n                    if self.button.pressed((x, y)):\r\n                        finished = True\r\n\r\n    def draw(self):\r\n        screen.fill((255, 255, 255))\r\n        zero_surf = pygame.image.load('0.jpg')\r\n        screen.blit(zero_surf, (0, 100))\r\n        self.button = Button()\r\n        self.button.create_button(screen, 'BLUE', 100, 250, 300, 100, 50, \"Play\", 'BLACK')\r\n        pygame.display.update()\r\n\r\n\r\nclass Step_1(Step):\r\n\r\n    def __init__(self, screen):\r\n        self.screen = screen\r\n\r\n    def run(self):\r\n        clock = pygame.time.Clock()\r\n        finished = False\r\n        while not finished:\r\n            clock.tick(FPS)\r\n            for event in pygame.event.get():\r\n                if event.type == pygame.QUIT:\r\n                    finished = True\r\n                if event.type == pygame.KEYDOWN:\r\n                    if event.key == pygame.K_SPACE:\r\n                        finished = True\r\n            self.draw()\r\n\r\n    def draw(self):\r\n        screen.fill((240, 255, 255))\r\n        text1 = \"Вот-вот начнётся твоя история. Но сначала узнаем, как ты сдала ЕГЭ.\"\r\n        self.blit_text(self.screen, text1, (50, 260), f1)\r\n        pygame.display.update()\r\n\r\n\r\nclass Step_2(Step):\r\n\r\n    def __init__(self, screen):\r\n        self.screen = screen\r\n        self.field1 = InsertField(\"\", 100, 100, 200, 50, self.screen)\r\n\r\n    def run(self):\r\n        clock = pygame.time.Clock()\r\n        finished = False\r\n        while not finished:\r\n            clock.tick(FPS)\r\n            for event in pygame.event.get():\r\n                if event.type == pygame.QUIT:\r\n                    finished = True\r\n                if event.type == pygame.KEYDOWN:\r\n                    if event.key == pygame.K_SPACE:\r\n                        return self.field1.value\r\n                        finished = True\r\n                    if event.key == pygame.K_BACKSPACE:\r\n                        if self.field1.is_active and self.field1.value != \"\":\r\n                            self.field1.value = self.field1.value[:-2]\r\n                            self.field1.value += \"|\"\r\n\r\n                    else:\r\n                        if len(self.field1.value) < 15:\r\n                            self.field1.insert(event.unicode)\r\n\r\n                if event.type == pygame.MOUSEBUTTONDOWN:\r\n                    if self.field1.check_mouse():\r\n                        self.field1.activate()\r\n                    else:\r\n                        self.field1.deactivate()\r\n\r\n            self.draw()\r\n\r\n    def draw(self):\r\n        screen.fill((100, 255, 255))\r\n        text1 = \"Введите имя:\"\r\n        self.blit_text(self.screen, text1, (50, 260), f1)\r\n        self.field1.draw()\r\n        pygame.display.update()\r\n\r\n\r\nclass Step_3(Step):\r\n\r\n    def __init__(self, screen):\r\n        self.screen = screen\r\n        self.ege_mark = randint(250, 310)\r\n\r\n    def run(self):\r\n        clock = pygame.time.Clock()\r\n        finished = False\r\n        self.ege_mark = randint(250, 310)\r\n        while not finished:\r\n            clock.tick(FPS)\r\n            for event in pygame.event.get():\r\n                if event.type == pygame.QUIT:\r\n                    finished = True\r\n                if event.type == pygame.KEYDOWN:\r\n                    if event.key == pygame.K_SPACE:\r\n                        finished = True\r\n            self.draw()\r\n\r\n    def draw(self):\r\n        screen.fill((240, 255, 255))\r\n        main_character.ege_point = self.ege_mark\r\n        pygame.draw.rect(screen, 'blue', (150, 200, 200, 300))\r\n        text1 = \"Твой балл ЕГЭ:\"\r\n        self.blit_text(screen, text1, (150, 100), f1)\r\n        self.blit_text(screen, str(self.ege_mark), (245, 350), f1)\r\n        pygame.display.update()\r\n\r\n\r\nclass Step_4(Step):\r\n\r\n    def __init__(self, screen):\r\n        self.screen = screen\r\n\r\n    def run(self):\r\n        clock = pygame.time.Clock()\r\n        finished = False\r\n        while not finished:\r\n            clock.tick(FPS)\r\n            for event in pygame.event.get():\r\n                if event.type == pygame.QUIT:\r\n                    finished = True\r\n                if event.type == pygame.MOUSEBUTTONDOWN:\r\n                    (x, y) = pygame.mouse.get_pos()\r\n                    if self.button3.pressed((x, y)):\r\n                        pygame.quit()\r\n                    elif self.button2.pressed((x, y)):\r\n                        ege_points()\r\n                        finished = True\r\n                    elif self.button1.pressed((x, y)):\r\n                        finished = True\r\n            self.draw()\r\n\r\n    def draw(self):\r\n        screen.fill((240, 255, 255))\r\n        draw_persona('main_hero.png')\r\n        text = \"Я сдала ЕГЭ: \"\r\n        self.blit_text(screen, text, (150, 100), f1)\r\n        text1 = \"Отлично! Пусть начнётся моя история.\"\r\n        text2 = \"Хорошо. Но я хочу пересдать ЕГЭ.\"\r\n        text3 = \"Я на ВМК\"\r\n        self.draw_choice(text1, text2, text3)\r\n        pygame.display.update()\r\n\r\n\r\nclass Step_7(Step):\r\n\r\n    def __init__(self, screen):\r\n        self.screen = screen\r\n\r\n    def run(self):\r\n        clock = pygame.time.Clock()\r\n        finished = False\r\n        while not finished:\r\n            clock.tick(FPS)\r\n            for event in pygame.event.get():\r\n                if event.type == pygame.QUIT:\r\n                    finished = True\r\n                if event.type == pygame.KEYDOWN:\r\n                    if event.key == pygame.K_SPACE:\r\n                        finished = True\r\n            self.draw()\r\n\r\n    def draw(self):\r\n        screen.fill('black')\r\n        text = \"Глава 1: первый день на Физтехе\"\r\n        pygame.draw.rect(screen, 'white', (180, 300, 200, 50))\r\n        self.blit_text(screen, text, (180, 300), f1)\r\n        pygame.display.update()\r\n\r\n\r\nclass Step_8(Step):\r\n\r\n    def __init__(self, screen):\r\n        self.screen = screen\r\n\r\n    def run(self):\r\n        clock = pygame.time.Clock()\r\n        finished = False\r\n        while not finished:\r\n            clock.tick(FPS)\r\n            for event in pygame.event.get():\r\n                if event.type == pygame.QUIT:\r\n                    finished = True\r\n                if event.type == pygame.KEYDOWN:\r\n                    if event.key == pygame.K_SPACE:\r\n                        finished = True\r\n            self.draw()\r\n\r\n    def draw(self):\r\n        scene = pygame.image.load('home.jpg')\r\n        screen.blit(scene, (0, 0))\r\n        pygame.display.update()\r\n\r\n\r\nclass Step_9(Step):\r\n\r\n    def __init__(self, screen):\r\n        self.screen = screen\r\n\r\n    def run(self):\r\n        clock = pygame.time.Clock()\r\n        finished = False\r\n        while not finished:\r\n            clock.tick(FPS)\r\n            for event in pygame.event.get():\r\n                if event.type == pygame.QUIT:\r\n                    finished = True\r\n                if event.type == pygame.KEYDOWN:\r\n                    if event.key == pygame.K_SPACE:\r\n                        finished = True\r\n            self.draw()\r\n\r\n    def draw(self):\r\n        scene = pygame.image.load('home.jpg')\r\n        screen.blit(scene, (0, 0))\r\n        draw_persona('main_hero.png')\r\n        text = \"Какое доброе утро! До сих пор не верится, что я поступила на Физтех. Что ж, первая ночь в общаге прошла \" \\\r\n               \"спокойно, посмотрим, что для меня приготовил первый учебный день. \"\r\n        pygame.draw.rect(screen, 'pink', (100, 600, 300, 40))\r\n        self.blit_text(screen, text, (100, 600), f1)\r\n        pygame.display.update()\r\n\r\n\r\nclass Step_10(Step):\r\n\r\n    def __init__(self, screen):\r\n        self.screen = screen\r\n\r\n    def run(self):\r\n        clock = pygame.time.Clock()\r\n        finished = False\r\n        while not finished:\r\n            clock.tick(FPS)\r\n            for event in pygame.event.get():\r\n                if event.type == pygame.QUIT:\r\n                    finished = True\r\n                if event.type == pygame.KEYDOWN:\r\n                    if event.key == pygame.K_SPACE:\r\n                        finished = True\r\n            self.draw()\r\n\r\n    def draw(self):\r\n        scene = pygame.image.load('home.jpg')\r\n        screen.blit(scene, (0, 0))\r\n        draw_persona('main_hero.png')\r\n        text = \"Ух, сегодня целых 6 пар… Многовато. Надеюсь, я получу от них удовольствие.\"\r\n        pygame.draw.rect(screen, 'pink', (100, 600, 300, 40))\r\n        self.blit_text(screen, text, (100, 600), f1)\r\n        pygame.display.update()\r\n\r\n\r\nclass Step_11(Step):\r\n\r\n    def __init__(self, screen):\r\n        self.screen = screen\r\n\r\n    def run(self):\r\n        clock = pygame.time.Clock()\r\n        finished = False\r\n        while not finished:\r\n            clock.tick(FPS)\r\n            for event in pygame.event.get():\r\n                if event.type == pygame.QUIT:\r\n                    finished = True\r\n                if event.type == pygame.KEYDOWN:\r\n                    if event.key == pygame.K_SPACE:\r\n                        finished = True\r\n            self.draw()\r\n\r\n    def draw(self):\r\n        scene = pygame.image.load('zastavka_11.png ')\r\n        screen.blit(scene, (0, 0))\r\n        pygame.display.update()\r\n\r\n\r\nclass Step_12(Step):\r\n\r\n    def __init__(self, screen):\r\n        self.screen = screen\r\n\r\n    def run(self):\r\n        clock = pygame.time.Clock()\r\n        finished = False\r\n        while not finished:\r\n            clock.tick(FPS)\r\n            for event in pygame.event.get():\r\n                if event.type == pygame.QUIT:\r\n                    finished = True\r\n                if event.type == pygame.KEYDOWN:\r\n                    if event.key == pygame.K_SPACE:\r\n                        finished = True\r\n            self.draw()\r\n\r\n    def draw(self):\r\n        scene = pygame.image.load('zastavka_12.jpg')\r\n        screen.blit(scene, (0, 0))\r\n        pygame.display.update()\r\n\r\n\r\nclass Step_13(Step):\r\n\r\n    def __init__(self, screen):\r\n        self.screen = screen\r\n\r\n    def run(self):\r\n        clock = pygame.time.Clock()\r\n        finished = False\r\n        while not finished:\r\n            clock.tick(FPS)\r\n            for event in pygame.event.get():\r\n                if event.type == pygame.QUIT:\r\n                    finished = True\r\n                if event.type == pygame.KEYDOWN:\r\n                    if event.key == pygame.K_SPACE:\r\n                        finished = True\r\n            self.draw()\r\n\r\n    def draw(self):\r\n        scene = pygame.image.load('zastavka_12.jpg')\r\n        screen.blit(scene, (0, 0))\r\n        draw_persona('main_hero.png')\r\n        text = \"Ух, почти успела. Вроде ничего важного не пропустила, отлично.\"\r\n        pygame.draw.rect(screen, 'pink', (100, 600, 300, 40))\r\n        self.blit_text(screen, text, (100, 600), f1)\r\n        pygame.display.update()\r\n\r\n\r\nclass Step_14(Step):\r\n\r\n    def __init__(self, screen):\r\n        self.screen = screen\r\n\r\n    def run(self):\r\n        clock = pygame.time.Clock()\r\n        finished = False\r\n        while not finished:\r\n            clock.tick(FPS)\r\n            for event in pygame.event.get():\r\n                if event.type == pygame.QUIT:\r\n                    finished = True\r\n                if event.type == pygame.KEYDOWN:\r\n                    if event.key == pygame.K_SPACE:\r\n                        finished = True\r\n            self.draw()\r\n\r\n    def draw(self):\r\n        scene = pygame.image.load('zastavka_13.jpg')\r\n        screen.blit(scene, (0, 0))\r\n        text = \"Привет! Я Миша. Ты же \" + str(main_character.name) + \"? Рад познакомиться. Мы с тобой одногруппники.\"\r\n        pygame.draw.rect(screen, 'blue', (100, 600, 300, 40))\r\n        self.blit_text(screen, text, (100, 600), f1)\r\n        pygame.display.update()\r\n\r\n\r\nclass Step_15(Step):\r\n\r\n    def __init__(self, screen):\r\n        self.screen = screen\r\n\r\n    def run(self):\r\n        clock = pygame.time.Clock()\r\n        finished = False\r\n        while not finished:\r\n            clock.tick(FPS)\r\n            for event in pygame.event.get():\r\n                if event.type == pygame.QUIT:\r\n                    finished = True\r\n                if event.type == pygame.KEYDOWN:\r\n                    if event.key == pygame.K_SPACE:\r\n                        finished = True\r\n            self.draw()\r\n\r\n    def draw(self):\r\n        scene = pygame.image.load('zastavka_12.jpg')\r\n        screen.blit(scene, (0, 0))\r\n        draw_persona('main_hero.png')\r\n        text = \"Привет. Взаимно!\"\r\n        pygame.draw.rect(screen, 'pink', (100, 600, 300, 40))\r\n        self.blit_text(screen, text, (100, 600), f1)\r\n        pygame.display.update()\r\n\r\n\r\nclass Step_16(Step):\r\n\r\n    def __init__(self, screen):\r\n        self.screen = screen\r\n\r\n    def run(self):\r\n        clock = pygame.time.Clock()\r\n        finished = False\r\n        while not finished:\r\n            clock.tick(FPS)\r\n            for event in pygame.event.get():\r\n                if event.type == pygame.QUIT:\r\n                    finished = True\r\n                if event.type == pygame.KEYDOWN:\r\n                    if event.key == pygame.K_SPACE:\r\n                        finished = True\r\n            self.draw()\r\n\r\n    def draw(self):\r\n        scene = pygame.image.load('zastavka_13.jpg')\r\n        screen.blit(scene, (0, 0))\r\n        text = \"Как тебе лекция?\"\r\n        pygame.draw.rect(screen, 'blue', (100, 600, 300, 40))\r\n        self.blit_text(screen, text, (100, 600), f1)\r\n        pygame.display.update()\r\n\r\n\r\nclass Step_17(Step):\r\n\r\n    def __init__(self, screen):\r\n        self.screen = screen\r\n\r\n    def run(self):\r\n        clock = pygame.time.Clock()\r\n        finished = False\r\n        while not finished:\r\n            clock.tick(FPS)\r\n            for event in pygame.event.get():\r\n                if event.type == pygame.QUIT:\r\n                    finished = True\r\n                if event.type == pygame.KEYDOWN:\r\n                    if event.key == pygame.K_SPACE:\r\n                        finished = True\r\n            self.draw()\r\n\r\n    def draw(self):\r\n        scene = pygame.image.load('zastavka_12.jpg')\r\n        screen.blit(scene, (0, 0))\r\n        draw_persona('main_hero.png')\r\n        text1 = \"Вообще ничего не понимаю...\"\r\n        text2 = \"Интересно, но пока дается с трудом.\"\r\n        text3 = \"Пфф.. Легкотня!\"\r\n        self.draw_choice(text1, text2, text3)\r\n        pygame.display.update()\r\n\r\n\r\ndef step_23():\r\n    scene = pygame.image.load('zastavka_13.jpg')\r\n    screen.blit(scene, (0, 0))\r\n    text = \"Если что, всегда рад предложить свою помощь. Я в 333 живу, легко запомнить. приходи на чай с матаном.\"\r\n    pygame.draw.rect(screen, 'blue', (100, 600, 300, 40))\r\n    # blit_text(screen, text, (100, 600), f1)\r\n    pygame.display.update()\r\n\r\n\r\ndef step_25():\r\n    scene = pygame.image.load('zastavka_13.jpg')\r\n    screen.blit(scene, (0, 0))\r\n    text = \"А я что-то не совсем понимаю… Я буду очень благодарен тебе, если ты поможешь мне разобраться с этой темой\"\r\n    pygame.draw.rect(screen, 'blue', (100, 600, 300, 40))\r\n    # blit_text(screen, text, (100, 600), f1)\r\n    pygame.display.update()\r\n\r\n\r\ndef step_26():\r\n    scene = pygame.image.load('zastavka_12.jpg')\r\n    screen.blit(scene, (0, 0))\r\n    draw_persona('main_hero.png')\r\n    draw_choice()\r\n    text1 = \"Спасибо! Я приду.\"\r\n    text2 = \"Спасибо, но я сама попробую разобраться.\"\r\n    text3 = \"Отвали, без тебя справлюсь.\"\r\n    # blit_text(screen, text1, (120, 570), f1)\r\n    # blit_text(screen, text2, (120, 615), f1)\r\n    # blit_text(screen, text3, (120, 660), f1)\r\n    pygame.display.update()\r\n\r\n\r\ndef step_31():\r\n    scene = pygame.image.load('zastavka_12.jpg')\r\n    screen.blit(scene, (0, 0))\r\n    draw_persona('main_hero.png')\r\n    draw_choice()\r\n    text1 = \"Хорошо, я с радостью помогу!\"\r\n    text2 = \"Посмотрим.\"\r\n    text3 = \"Это не мои проблемы.\"\r\n    # blit_text(screen, text1, (120, 570), f1)\r\n    # blit_text(screen, text3, (120, 660), f1)\r\n    pygame.display.update()\r\n\r\n\r\ndef step_35():\r\n    scene = pygame.image.load('zastavka_13.jpg')\r\n    screen.blit(scene, (0, 0))\r\n    text = \"Отлично! Приходи ко мне после пар.\"\r\n    pygame.draw.rect(screen, 'blue', (100, 600, 300, 40))\r\n    # blit_text(screen, text, (100, 600), f1)\r\n    pygame.display.update()\r\n\r\n\r\ndef step_35_1():\r\n    scene = pygame.image.load('zastavka_12.jpg')\r\n    screen.blit(scene, (0, 0))\r\n    draw_persona('main_hero.png')\r\n    text = \"Договорились!\"\r\n    pygame.draw.rect(screen, 'pink', (100, 600, 300, 40))\r\n    # blit_text(screen, text, (100, 600), f1)\r\n    pygame.display.update()\r\n\r\n\r\ndef step_36():\r\n    scene = pygame.image.load('zastavka_13.jpg')\r\n    screen.blit(scene, (0, 0))\r\n    text = \"Ну, приходи ко мне, если надумаешь. Буду рад видеть.\"\r\n    pygame.draw.rect(screen, 'blue', (100, 600, 300, 40))\r\n    # blit_text(screen, text, (100, 600), f1)\r\n    pygame.display.update()\r\n\r\n\r\ndef step_36_1():\r\n    scene = pygame.image.load('zastavka_12.jpg')\r\n    screen.blit(scene, (0, 0))\r\n    draw_persona('main_hero.png')\r\n    text = \"Хорошо.\"\r\n    pygame.draw.rect(screen, 'pink', (100, 600, 300, 40))\r\n    # blit_text(screen, text, (100, 600), f1)\r\n    pygame.display.update()\r\n\r\n\r\ndef step_37():\r\n    scene = pygame.image.load('zastavka_12.jpg')\r\n    screen.blit(scene, (0, 0))\r\n    text = \"Лекция окончена. Всем спасибо, до свидания.\"\r\n    pygame.draw.rect(screen, 'white', (100, 600, 300, 40))\r\n    # blit_text(screen, text, (100, 600), f1)\r\n    pygame.display.update()\r\n\r\n\r\ndef step_38():\r\n    scene = pygame.image.load('home.jpg')\r\n    screen.blit(scene, (0, 0))\r\n    draw_persona('main_hero.png')\r\n    text = \"Ух.. Какой насыщенный день. Все 6 пар отсидела, устала до ужаса.\"\r\n    pygame.draw.rect(screen, 'pink', (100, 600, 300, 40))\r\n    # blit_text(screen, text, (100, 600), f1)\r\n    pygame.display.update()\r\n\r\n\r\n# катя просто лучшая, люблю её\r\n\r\nstep0 = Step_0(screen)\r\nstep1 = Step_1(screen)\r\nstep2 = Step_2(screen)\r\nstep3 = Step_3(screen)\r\nstep4 = Step_4(screen)\r\nstep7 = Step_7(screen)\r\nsteps = [step0, step1, step2, step3, step4, step7]\r\n\r\nsteps[0].run()\r\nsteps[1].run()\r\nsteps[2].run()\r\nmain_character = Persona()\r\nmain_character.name = steps[2].field1.value\r\nsteps[3].run()\r\nsteps[4].run()\r\nsteps[5].run()\r\n\r\npygame.quit()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plot_kate.py b/plot_kate.py
--- a/plot_kate.py	(revision a4dcb79ec952feb402f9737e3cc7d956e3747e64)
+++ b/plot_kate.py	(date 1621216620627)
@@ -1,5 +1,5 @@
 # В данном файле хранится сюжет и его обработка
-import pymorphy2
+#import pymorphy2
 import pygame
 import numpy as np
 from random import randint
